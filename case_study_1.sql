--1. Display the number of states present in the LocationTable. 
select count(distinct(state)) as [no. of states] from location  
--2. How many products are of regular type?
select count(distinct(product)) from product 
where Type = 'regular'
--3. How much spending has been done on marketing of product ID 1?
select sum(marketing) as [spending on marketing] from fact 
where productid = 1
--4. What is the minimum sales of a product?
select min(sales) as [minimum sales] from fact
--5. Display the max Cost of Good Sold (COGS).
select max(cogs) as [max cost of good sold] from fact

--6. Display the details of the product where product type is coffee. 
select * from product where [product type] = 'coffee'
--7. Display the details where total expenses are greater than 40. 
select * from fact where [total expenses]>40
--8. What is the average sales in area code 719?
select AVG(sales) as [average sale] from fact where [area code] = 719
--9. Find out the total profit generated by Colorado state.
select sum(fact.profit) as total_profit,location.state from location
inner join fact on location.[area code] = fact.[area code]
where location.state = 'Colorado'
group by location.state
--10. Display the average inventory for each product ID.
select productid,avg(inventory) from fact
group by productid
order by productid
--11. Display state in a sequential order in a Location Table.
select distinct(state) from location
order by state
--12. Display the average budget of the Product where the average budget
--margin should be greater than 100.
select productid,avg([budget margin]) as average_budget from fact
group by productid
having avg([budget margin])>100
order by productid
--13. What is the total sales done on date 2010-01-01?
select sum(sales) as [total sale] from fact
where date = '2010-01-01'
--14. Display the average total expense of each product ID on an individual date.
select avg([total expenses]) as [average total expense],productid,date from fact
group by productid,date
order by productid,date
--15. Display the table with the following attributes such as date, productID,
--product_type, product, sales, profit, state, area_code.
select fact.date,fact.productid,product.[product type],
       product.product,fact.sales,fact.profit,
	   location.state,location.[area code] from fact
	   inner join product on fact.productid = product.productid
	   inner join location on fact.[area code] = location.[area code]

--16. Display the rank without any gap to show the sales wise rank.
select sales, dense_rank() over(order by sales desc) from fact
group by sales
--17. Find the state wise profit and sales.
select L.state,sum(F.profit) as profit,sum(F.sales) as sales from location as L
       inner join fact as F on L.[area code] = F.[area code]
GROUP BY L.state
--18. Find the state wise profit and sales along with the product name.
select L.state,P.product AS product_name,sum(F.profit) as profit,sum(F.sales) as sales from location as L
       inner join fact as F on L.[area code] = F.[area code]
	   inner join product as P on F.productid = P.productid
GROUP BY L.state,P.product
--19. If there is an increase in sales of 5%, calculate the increased sales.
select sales,(sales*1.05) as [increased sales] from fact
--20. Find the maximum profit along with the product ID and product type.
select P.productid,p.[product type],
max(F.profit) as max_profit from product P
inner join fact as F on P.productid = F.productid
group by P.productid,p.[product type]
--21. Create a stored procedure to fetch the result according to the product type
--from Product Table.
create procedure Result_by_type @product_type varchar(100)
as
select * from product
where [product type] = @product_type
go
--calling the procedure
exec Result_by_type @product_type = 'Espresso'
--22. Write a query by creating a condition in which if the total expenses is less than 
--60 then it is a profit or else loss.
select *,
(case when [total expenses]<60 then 'profit'
else 'loss' end) as condition from fact
--23. Give the total weekly sales value with the date and product ID details. Use
--roll-up to pull the data in hierarchical order.
select date,productid,sum(sales) as [total weekly sales value] from fact
group by 
rollup (date,productid)

--24. Apply union and intersection operator on the tables which consist of
--attribute area code.

-- union
select [area code] from fact
union
select [area code] from location

--intersect
select [area code] from fact
intersect
select [area code] from location 
--25. Create a user-defined function for the product table to fetch a particular
--product type based upon the user’s preference.

create function myproduct
(@product_type varchar(200))
returns table
as
return
(
select * from product where [product type] = @product_type
)
--calling function
select * from myproduct('coffee')

--26. Change the product type from coffee to tea where product ID is 1 and undo it.
Begin transaction
update product set [product type] = 'tea' where productid = 1

rollback;
-- to see result
select * from product
--27. Display the date, product ID and sales where total expenses are
--between 100 to 200.
select date,productid,sales,[total expenses]
from fact
where [total expenses] between 100 and 200
order by productid
--28. Delete the records in the Product Table for regular type.
Select ASCII(SUBSTRING(PRODUCT,5,1)) FROM PRODUCT

delete from product where type = 'regular'
--29. Display the ASCII value of the fifth character from the column Product
